# 65C02 Breadboard linker config
# https://cc65.github.io/doc/customizing.html

MEMORY {
  ZP:     start = $0,    size = $100,  type = rw, define = yes;
  RAM:    start = $200,  size = $3E00, define = yes;
  ROM:    start = $8000, size = $8000, fill = yes, file = %O;
}

SEGMENTS {
    ZEROPAGE: load = ZP,  type = zp,  define   = yes;
    DATA:     load = ROM, type = rw,  define   = yes, run = RAM;
    BSS:      load = RAM, type = bss, define   = yes;
    HEAP:     load = RAM, type = bss, optional = yes;
    STARTUP:  load = ROM, type = ro;
    ONCE:     load = ROM, type = ro,  optional = yes;
    CODE:     load = ROM, type = ro,  start    = $8000;
    RODATA:   load = ROM, type = ro;
    VECTORS:  load = ROM, type = ro,  start    = $FFFA;
}

FEATURES {
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
    #STARTADDRESS:   default = $8000;
}

SYMBOLS {
  __STACKSIZE__:  type = export, value = $0100;
  __PORTB__:      type = export, value = $6000;
  __PORTA__:      type = export, value = $6001;
  __DDRA__:       type = export, value = $6003;
  __DDRB__:       type = export, value = $6002;
}
#MEMORY {
  #ZP:     start = $0,    size = $100,  type = rw, define = yes;
  #RAM:    start = $200,  size = $3E00, define = yes;
  #ROM:    start = $8000, size = $8000, fill = yes, file = %O;
#}

#SEGMENTS {
    #ZEROPAGE: load = ZP,  type = zp,  define   = yes;
    #DATA:     load = ROM, type = rw,  define   = yes, run = RAM;
    #BSS:      load = RAM, type = bss, define   = yes;
    #HEAP:     load = RAM, type = bss, optional = yes;
    #STARTUP:  load = ROM, type = ro;
    #ONCE:     load = ROM, type = ro,  optional = yes;
    #CODE:     load = ROM, type = ro;
    #RODATA:   load = ROM, type = ro;
    #VECTORS:  load = ROM, type = ro,  start    = $FFFA;
#}

#FEATURES {
    #CONDES:    segment = STARTUP,
               #type    = constructor,
               #label   = __CONSTRUCTOR_TABLE__,
               #count   = __CONSTRUCTOR_COUNT__;
    #CONDES:    segment = STARTUP,
               #type    = destructor,
               #label   = __DESTRUCTOR_TABLE__,
               #count   = __DESTRUCTOR_COUNT__;
#}

#SYMBOLS {
  #__STACKSIZE__:  type = export, value = $0100;
  #__PORTB__:      type = export, value = $6000;
  #__PORTA__:      type = export, value = $6001;
  #__DDRA__:       type = export, value = $6003;
  #__DDRB__:       type = export, value = $6002;
#}
#MEMORY { 
    #ZP: start = $0000, size = $0100, type = rw, fill = yes, fillval = $00, file = "%O";
    #STACK: start = $0100, size = $0100, type = ro, fill = yes, fillval = $00, file = "%O"; 
    ##SYS: start = $0200, size = $0A00, type = ro, fill = yes, fillval = $00, file = "%O";
    ##C00: start = $0C00, size = $0200, type = ro, fill = yes, fillval = $00, file = "%O";
    ##E00: start = $0E00, size = $0100, type = ro, fill = yes, fillval = $00, file = "%O";
    ##F00: start = $0F00, size = $1100, type = ro, fill = yes, fillval = $00, file = "%O";
    ##FAKEV: start = $2000, size = $4000, type = ro, fill = yes, fillval = $00, file = "%O";
    #RAM: start = $6000, size = $6000, type = ro, fill = yes, fillval = $00, file = "%O";
    #ROM: start=$8000, size=$8000, type=ro, define=yes, fill=yes, fillval=$ea, file="%O";
#}

#SEGMENTS { 
    ##ZEROPAGE: load = ZP, type = zp;
    ##C00: load = C00, type = ro;
    ##E00: load = E00, type = ro;
    ##F00: load = F00, type = ro;
    #CODE: load = ROM, type = ro;
#}
